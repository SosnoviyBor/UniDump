; -----------------------------------------
; ЛР №7
; -----------------------------------------
; Архітектура комп'ютера
; Завдання: Підпрограми
; ВУЗ: КНУУ "КПІ"
; Факультет: ФІОТ
; Курс: 1
; Група: ІТ-03
; -----------------------------------------
; Автори:	Букрєєв М.С.
;			Король К.В.
;			Федяй Б.В.
; Дата: 11/05/2021
; -----------------------------------------

;					І. Заголовок програми
IDEAL
MODEL small
STACK 2048
;					ІІ. Макроси
MACRO M_init		; Макрос для ініціалізації. Його початок
	mov ax, @data	; @data ідентифікатор, що створюються директивою MODEL
	mov ds, ax		; Завантаження початку сегменту даних в регістр DS
	mov es, ax		; Завантаження початку сегменту даних в регістр ES
	ENDM M_init		; Кінець макросу
;					ІІІ. Початок сегменту даних
DATASEG
a1 db -7
a2 db 3
a3 db 2
a4 db 4
a5 db 1

ui db "Team 1 welcomes you, fellow traveller",13,10
   db 13,10
   db "Press q to calculate a complex equation",13,10
   db "Press W to play an awful noise",13,10
   db "Press e to exit",13,10
   db "------------------------",13,10,'$'
ui_end db "Thanks for using our services!",13,10,'$'

equation db "(a1 + a2) * a3 / a4 + a5",13,10
		 db "a1 = -7",13,10
		 db "a2 = 3",13,10
		 db "a3 = 2",13,10
		 db "a4 = 4",13,10
		 db "a5 = 1",13,10
		 db 13,10
		 db "Result = ", '$'

standby db "                    ___                                          ___",13,10
		db " __________________/  /                       __________________/  /",13,10
		db "| _    _______    /  /                       | _    _______    /  /",13,10
		db "|(_) .d########b. //)| _____________________ |(_) .d########b. //)|",13,10
		db "|  .d############//  ||        _____        ||  .d############//  |",13,10
		db '| .d######""####//b. ||() ||  [Team1]  || ()|| .d######""####//b. |',13,10
		db "| 9######(  )#_//##P ||()|__|  | = |  |__|()|| 9######(  )#_//##P |",13,10
		db "| 'b######++#/_/##d' ||() ||   | = |   || ()|| 'b######++#/_/##d' |",13,10
		db '|  "9############P"  ||   ||   |___|   ||   ||  "9############P"  |',13,10
		db '|  _"9a#######aP"    ||  _   _____..__   _  ||  _"9a#######aP"    |',13,10
		db '| |_|  `""""""       || (_) |_____||__| (_) || |_|  `""""""       |',13,10
		db "|  ___..___________  ||_____________________||  ___..___________  |",13,10
		db "| |___||___________| |                       | |___||___________| |",13,10
		db "|____________________|                       |____________________|",13,10,'$'

exCode db 0

; Константи
frequency equ 255
duration equ 1500
;					IV. Початок сегменту коду
CODESEG
Start:
	M_init
	; -----------------------------------------
	; Ініціалізація таймера
	mov al,1
	out 42h, al
	; Виводимо меню у консоль
	call draw_ui

	ask_for_input:
	; Зчитуємо символ, введений із клавіатури (AL <- input)
	mov ah, 08h
	int 21h
	call draw_ui

	; Перевірка вводу
	cmp al, "q"
	je q_pressed
	cmp al, "W"
	je W_pressed
	cmp al, "e"
	je e_pressed
	jmp ask_for_input

	q_pressed:
	; Обчислення прикладу
	call calculate
	jmp ask_for_input

	W_pressed:
	; Пищання у колонки
	call do_noise
	jmp ask_for_input

	e_pressed:
	; Вихід із програми
	mov ah, 09h
	mov dx, offset ui_end
	int 21h
	; -----------------------------------------
	mov ah, 4ch
	mov al, [exCode]
	int 21h

	; =================================== Процедури ===================================
	; ---------------------------------------------------------------------------------
	; Призначення: вивід інтерфейсу
	; Вхід: ---
	; Вихід: ---
	; ---------------------------------------------------------------------------------
	PROC draw_ui
		push ax
		push dx

		; Очищаємо консоль
		mov ax,03h
		int 10h
		; Виводим текст у консоль
		mov ah, 09h
		mov dx, offset ui
		int 21h

		pop dx
		pop ax
		ret
		ENDP draw_ui

	; ---------------------------------------------------------------------------------
	; Призначення: обчислення виразу, та його виводу на екран
	; Вхід: ---
	; Вихід: ---
	; ---------------------------------------------------------------------------------
	PROC calculate

		; Підготовка декоративного тексту
		mov ah, 09h
		mov dx, offset equation
		int 21h
	
		; Обнулюємо регістр АХ. Це не обов'язково, але про всяк випадок хай буде
		mov ax, 0

		; a1 + a2
		mov al, [a1]
		mov dl, [a2]
		call iadd
		; (a1 + a2) * a3
		imul [a3]
		; (a1 + a2) * a3 / a4
		idiv [a4]
		; (a1 + a2) * a3 / a4 + a5
		mov dl, [a5]
		call iadd

		; Перевіряємо, чи від'ємний наш результат
		cmp al, 0
		jns number_printer
		; Підготовка даних до виводу, якщо результат від'ємний
		minus_printer:
			neg ax
			push ax

			mov dl, "-"
			mov ah, 02h
			int 21h

			pop ax

		; Вивід результату у консоль
		number_printer:
		; Конвертуємо результат у ASCII код нашого числа
		add al, 30h
		; Виводимо число у консоль
		mov dl, al
		mov ah, 02h
		int 21h

		ret
		ENDP calculate

	; ---------------------------------------------------------------------------------
	; Призначення: додавання із урахуванням знаку перед числом
	; Вхід:
	; AL <- доданок 1
	; DL <- доданок 2
	; Вихід:
	; AL <- результат
	; ---------------------------------------------------------------------------------
	PROC iadd
		; Перевіряємо знак першого доданку
		cmp al, 0
		js minus_
		jmp plus_
		; Перевіряємо знак другого доданку, якщо перший додатній
		plus_:
		cmp dl, 0
		js plus_minus
		jmp plus_plus
		; Перевіряємо знак другого доданку, якщо перший від'ємний
		minus_:
		cmp dl, 0
		js minus_minus
		jmp minus_plus_2

			; Рахуємо
			plus_plus:
			add al, dl
			jmp eq_end

			plus_minus:
			neg dl
			sub al, dl
			jmp eq_end

			minus_plus_2:
			neg al
			sub dl, al
			mov al, dl
			jmp eq_end

			minus_minus:
			neg al
			neg dl
			add al, dl
			neg al
			jmp eq_end

		eq_end:
		ret
		ENDP iadd

	; ---------------------------------------------------------------------------------
	; Призначення: програш звуку
	; Вхід:
	; frequency <- частота звуку
	; duration <- тривалість звуку
	; Вихід:
	; Максимально противний звук із колонок. Наслоджуйтесь
	; ---------------------------------------------------------------------------------
	PROC do_noise
		; Виводимо у консоль індикатор наявності звуку
		mov ax,03h
		int 10h
		mov ah, 09h
		mov dx, offset standby
		int 21h

		; Зберігаємо початковий стан динаміка
		in al, 61h
		push ax

		or al, 00000011B	; Зміна стану на включений динамік (режим керування мікросхемою таймера)
		out 61h, al			; Занесення стану
		mov al, frequency	; Встановлюємо частоту (1.19МГц / frequency)
		out 42h, al			; Вмикаємо таймер, що буде подавати імпульси на динамік за заданою частотою
		call pause			; Виклик процедури очікування, під час виконання котрої в нас буде створюватись звук

		; Повертаємо початковий стан динаміка
		pop ax
		out 61h, al

		; Повертаємо звичайний інтерфейс
		call draw_ui
		ret
		ENDP do_noise

	; ---------------------------------------------------------------------------------
	; Призначення: очікування
	; Вхід: ---
	; Вихід: ---
	; ---------------------------------------------------------------------------------
	PROC pause
		push cx
		
		; Робимо duration^2 ітерацій циклу та сподіваємось, що це займе приблизно 1 секунду
		; Єкспериментальним методом було доведено, що виконання duration^2 ітерацій циклу займає приблизно 1 секунду
		mov cx, duration
		loop1:
			push cx
			mov cx, duration
			loop2:
				loop loop2
				pop cx
			loop loop1
		
		pop cx
		ret
		ENDP pause

end Start